package view;

import javax.swing.JOptionPane;

import app.Professor;
import cadastros.CadastroProfessor;
import model.exception.CampoEmBrancoException;

public class MenuProfessor {

	public static Professor dadosNovoProfessor() throws CampoEmBrancoException {
		JOptionPane.showMessageDialog(null, "Todos os campos são obrigatorios!");
		String nome = lerNome();
		String cpf = lerCPF();
		String email = lerEmail();
		String matriculaFUB = lerMatriculaFUB();
		String areaFormacao = lerAreaFormacao();
		return new Professor(nome, cpf, email, matriculaFUB, areaFormacao);
	}

	private static String lerNome() throws CampoEmBrancoException {
		String nome = JOptionPane.showInputDialog("Informe o nome do professor: ");
		if (nome.isEmpty()) {
			throw new CampoEmBrancoException("Campo NOME esta em branco, tente novamente novamente");
		}
		return nome;
	}

	private static String lerCPF() throws CampoEmBrancoException {
		String CPF = JOptionPane.showInputDialog("Informe o CPF do professor: ");
		if (CPF.isEmpty()) {
			throw new CampoEmBrancoException("Campo CPF esta em branco, tente novamente novamente");
		}
		return CPF;
	}

	private static String lerEmail() throws CampoEmBrancoException {
		String email = JOptionPane.showInputDialog("Informe o email do professor: ");
		if (email.isEmpty()) {
			throw new CampoEmBrancoException("Campo EMAIL esta em branco, tente novamente novamente");
		}
		return email;
	}

	private static String lerMatriculaFUB() throws CampoEmBrancoException {
		String matricula = JOptionPane.showInputDialog("Informe a matricula do professor: ");
		if (matricula.isEmpty()) {
			throw new CampoEmBrancoException("Campo MATRICULAFUB esta em branco, tente novamente novamente");
		}
		return matricula;
	}

	private static String lerAreaFormacao() throws CampoEmBrancoException {
		String curso = JOptionPane.showInputDialog("Informe o curso do professor: ");
		if (curso.isEmpty()) {
			throw new CampoEmBrancoException("Campo AREA DE FORMAÇãO esta em branco, tente novamente novamente");
		}
		return curso;
	}

	public static void menuProfessor(CadastroProfessor cadProfessor) throws CampoEmBrancoException {
		String txt = "Informe a opção desejada \n" + "1 - Cadastrar professor\n" + "2 - Pesquisar professor\n"
				+ "3 - Atualizar professor\n" + "4 - Remover professor\n" + "0 - Voltar para menu anterior";

		int opcao = -1;
		do {
			try {
				String strOpcao = JOptionPane.showInputDialog(txt);
				opcao = Integer.parseInt(strOpcao);

				switch (opcao) {
				case 1:
					Professor novoProfessor = dadosNovoProfessor();
					cadProfessor.cadastrarProfessor(novoProfessor);
					break;

				case 2:
					String matriculaFUB = lerMatriculaFUB();
					Professor p = cadProfessor.pesquisarProfessor(matriculaFUB);
					if (p != null) {
						JOptionPane.showMessageDialog(null, p.toString());
						break;
					} else {
						JOptionPane.showMessageDialog(null, "MatriculaFUB incorreta ou não existe.");
						break;
					}

				case 3:
					matriculaFUB = lerMatriculaFUB();
					Professor novoCadastro = dadosNovoProfessor();
					boolean atualizado = cadProfessor.atualizarProfessor(matriculaFUB, novoCadastro);
					if (atualizado) {
						JOptionPane.showMessageDialog(null, "Cadastro atualizado.");
					}
					break;

				case 4:
					matriculaFUB = lerMatriculaFUB();
					Professor remover = cadProfessor.pesquisarProfessor(matriculaFUB);
					boolean removido = cadProfessor.removerProfessor(remover);
					if (removido) {
						JOptionPane.showMessageDialog(null, "Professor removido do cadastro");
						System.gc();
					}
				case 0:
					return;

				default:
					JOptionPane.showMessageDialog(null, "Nenhuma opcao valida.\n" + "Tente novamente!");
					opcao = -1;

					break;
				}
			} catch (CampoEmBrancoException e) {
				JOptionPane.showMessageDialog(null, "Opção em branco:\n" + e.getMessage());
			} catch (NumberFormatException e) {
				JOptionPane.showMessageDialog(null, "Opção invalida");
				opcao = -1;
			}
		} while (opcao != 0);
		return;
	}
}
